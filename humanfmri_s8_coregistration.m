function PREPROC = humanfmri_s8_coregistration(subject_code, study_imaging_dir, varargin)

% This function does coregistration between anatomical T1 image and
% functional reference image using FLIRT BBR (FSL, for pre-alignment).
% If freesurfer surface reconstruction was done before, then bbregister
% (freesurfer) was additionally used for refinement for coregistration.
%
%
% :Usage:
% ::
%     PREPROC = humanfmri_s8_coregistration(subject_code, study_imaging_dir, varargin)
%
%
% :Input:
% ::
%   - subject_code       the subject code (e.g., 'sub-caps001').
%   - study_imaging_dir  the directory information for the study imaging data 
%                        (e.g., '/Volumes/habenula/hbmnas/data/CAPS2/Imaging').
%
%
% :Optional Input:
% ::
%   - no_check_reg       no check regisration. if you want to run all the
%                        subject without any interaction, this will be helpful.
%
%
% :Output:
% ::
%     PREPROC.transform_EPI_to_T1
%     PREPROC.transform_T1_to_EPI
%     (optional) PREPROC.transform_EPI_to_T1_ITK
%     (optional) PREPROC.transform_T1_to_EPI_ITK
%     PREPROC.coregistered_func_reference_file
%     PREPROC.coregistered_func_reference_file_masked
%     PREPROC.coregistered_func_reference_file_binarymask
%     PREPROC.coregistered_wmseg
%     PREPROC.coregistered_csfseg
%
%
% :Example:
% ::
%
%
% ..
%     Author and copyright information:
%
%     Copyright (C) Jan 2019  Choong-Wan Woo & Jae-Joong Lee
%
%     This program is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
%
%     This program is distributed in the hope that it will be useful,
%     but WITHOUT ANY WARRANTY; without even the implied warranty of
%     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%     GNU General Public License for more details.
%
%     You should have received a copy of the GNU General Public License
%     along with this program.  If not, see <http://www.gnu.org/licenses/>.
% ..


fprintf('\n\n\n');
do_check = true;

for i = 1:length(varargin)
    if ischar(varargin{i})
        switch varargin{i}
            case {'no_check_reg'}
                do_check = false;
        end
    end
end


PREPROC = save_load_PREPROC(fullfile(study_imaging_dir, 'preprocessed', subject_code), 'load'); % load PREPROC
print_header('Coregistration', PREPROC.subject_code);
PREPROC.current_step = 's8';
PREPROC.current_step_letter = PREPROC.current_step_letter;

% Step 1: Register EPI to T1 using FSL (BBR cost function)
fprintf('Step 1: Registering EPI to T1 using FSL (BBR cost function)...\n');

% Pre-alignment
fprintf('Pre-alignment...\n');
if contains(PREPROC.current_step_letter, 'dc')
    func_ref = PREPROC.dc_func_reference_file;
else
    if contains(PREPROC.current_step_letter, 'r')
        func_ref = PREPROC.func_reference_file;
    end
end
system(['export FSLOUTPUTTYPE=NIFTI;' ...
    ...
    'flirt' ...
    ' -in ' func_ref ...
    ' -ref ' PREPROC.anat_reference_file_masked ...
    ' -dof 6' ...
    ' -omat ' fullfile(PREPROC.preproc_func_dir, 'transform_EPI_to_T1_fslinit.mat') ...
    ' -out ' fullfile(PREPROC.preproc_func_dir, 'coregistered_EPI_to_T1_fslinit.nii')]);
% FSL BBR
fprintf('Running BBR...\n');
system(['export FSLOUTPUTTYPE=NIFTI;' ...
    ...
    'flirt' ...
    ' -in ' func_ref ...
    ' -ref ' PREPROC.anat_reference_file ...
    ' -dof 6' ...
    ' -cost bbr' ...
    ' -wmseg ' PREPROC.anat_reference_file_wmseg_coreg ...
    ' -init ' fullfile(PREPROC.preproc_func_dir, 'transform_EPI_to_T1_fslinit.mat') ...
    ' -omat ' fullfile(PREPROC.preproc_func_dir, 'transform_EPI_to_T1_fslbbr.mat') ...
    ' -schedule $FSLDIR/etc/flirtsch/bbr.sch' ...
    ' -out ' fullfile(PREPROC.preproc_func_dir, 'coregistered_EPI_to_T1_fslbbr.nii')]);

if isfield(PREPROC, 'surfrecon_dir')
    
    % Step 2: Refine registration of EPI to T1 using freesurfer (bbregister)
    fprintf('Step 2: Refining registration of EPI to T1 using freesurfer (bbregister)...\n');
    
    % Calculate difference of orientation between FSL and freesurfer: FSL -> freesurfer
    system(['export SUBJECTS_DIR=' PREPROC.surfrecon_dir ';' ...
        ...
        'tkregister2' ...
        ' --s ' PREPROC.subject_code ...
        ' --noedit' ...
        ' --mov ' PREPROC.anat_reference_file ...
        ' --targ ' fullfile(PREPROC.surfrecon_dir, PREPROC.subject_code, 'mri', 'T1.mgz') ...
        ' --reg ' fullfile(PREPROC.preproc_func_dir, 'transform_fsl_to_freesurfer.dat') ...
        ' --regheader' ...
        ' --fslregout ' fullfile(PREPROC.preproc_func_dir, 'transform_fsl_to_freesurfer.mat')]);
    
%     transform_fsl_to_freesurfer =
%     
%         1.0000         0         0         0
%              0         0   -1.0000  255.0000
%              0    1.0000         0         0
%              0         0         0    1.0000
     
    % Calculate difference of orientation between FSL and freesurfer: freesurfer -> FSL
    system(['export SUBJECTS_DIR=' PREPROC.surfrecon_dir ';' ...
        ...
        'tkregister2' ...
        ' --s ' PREPROC.subject_code ...
        ' --noedit' ...
        ' --mov ' fullfile(PREPROC.surfrecon_dir, PREPROC.subject_code, 'mri', 'T1.mgz') ...
        ' --targ ' PREPROC.anat_reference_file ...
        ' --reg ' fullfile(PREPROC.preproc_func_dir, 'transform_freesurfer_to_fsl.dat') ...
        ' --regheader' ...
        ' --fslregout ' fullfile(PREPROC.preproc_func_dir, 'transform_freesurfer_to_fsl.mat')]);
    
%     transform_freesurfer_to_fsl =
%     
%         1.0000         0         0         0
%              0         0    1.0000   -0.0000
%              0   -1.0000         0  255.0000
%              0         0         0    1.0000
     
    % Generate initial coregistration matrix (FSL BBR) in freesurfer coordinates and TkRegister format
    system(['convert_xfm' ...
        ' ' fullfile(PREPROC.preproc_func_dir, 'transform_EPI_to_T1_fslbbr.mat') ... % EPI to T1 with FSL BBR
        ' -concat ' fullfile(PREPROC.preproc_func_dir, 'transform_fsl_to_freesurfer.mat') ... % FSL to freesurfer
        ' -omat ' fullfile(PREPROC.preproc_func_dir, 'transform_EPI_to_T1_fslbbr_freesurfer.mat')]); % EPI to T1 with FSL BBR in freesurfer coordinates
    system(['export SUBJECTS_DIR=' PREPROC.surfrecon_dir ';' ...
        ...
        'tkregister2' ...
        ' --s ' PREPROC.subject_code ...
        ' --noedit' ...
        ' --mov ' func_ref ...
        ' --targ ' fullfile(PREPROC.surfrecon_dir, PREPROC.subject_code, 'mri', 'T1.mgz') ...
        ' --fsl ' fullfile(PREPROC.preproc_func_dir, 'transform_EPI_to_T1_fslbbr_freesurfer.mat') ...
        ' --reg ' fullfile(PREPROC.preproc_func_dir, 'transform_EPI_to_T1_fslbbr_freesurfer.dat')]);
    % bbregister
    system(['export SUBJECTS_DIR=' PREPROC.surfrecon_dir ';' ...
        ...
        'bbregister' ...
        ' --s ' PREPROC.subject_code ...
        ' --mov ' func_ref ...
        ' --bold' ...
        ' --init-reg ' fullfile(PREPROC.preproc_func_dir, 'transform_EPI_to_T1_fslbbr_freesurfer.dat') ...
        ' --reg ' fullfile(PREPROC.preproc_func_dir, 'transform_EPI_to_T1_bbregister.dat') ...
        ' --fslmat ' fullfile(PREPROC.preproc_func_dir, 'transform_EPI_to_T1_bbregister.mat') ...
        ' --o ' fullfile(PREPROC.preproc_func_dir, 'coregistered_EPI_to_T1_bbregister.nii')]);
    % Concatenating transformation matricies for coregistration
    PREPROC.transform_EPI_to_T1 = fullfile(PREPROC.preproc_func_dir, 'transform_EPI_to_T1.mat');
    system(['convert_xfm' ...
        ' ' fullfile(PREPROC.preproc_func_dir, 'transform_EPI_to_T1_bbregister.mat') ... % EPI to T1 with bbregister
        ' -concat ' fullfile(PREPROC.preproc_func_dir, 'transform_freesurfer_to_fsl.mat') ... % freesurfer to FSL
        ' -omat ' PREPROC.transform_EPI_to_T1]); % EPI to T1 coregistration matrix!!!
    PREPROC.transform_T1_to_EPI = fullfile(PREPROC.preproc_func_dir, 'transform_T1_to_EPI.mat');
    system(['convert_xfm' ...
        ' ' PREPROC.transform_EPI_to_T1 ...
        ' -inverse' ...
        ' -omat ' PREPROC.transform_T1_to_EPI]); % T1 to EPI coregistration matrix!!!

else
    
    PREPROC.transform_EPI_to_T1 = fullfile(PREPROC.preproc_func_dir, 'transform_EPI_to_T1.mat');
    system(['cp ' fullfile(PREPROC.preproc_func_dir, 'transform_EPI_to_T1_fslbbr.mat') ' ' PREPROC.transform_EPI_to_T1]);
    PREPROC.transform_T1_to_EPI = fullfile(PREPROC.preproc_func_dir, 'transform_T1_to_EPI.mat');
    system(['convert_xfm' ...
        ' ' PREPROC.transform_EPI_to_T1 ...
        ' -inverse' ...
        ' -omat ' PREPROC.transform_T1_to_EPI]); % T1 to EPI coregistration matrix!!!
    
    PREPROC.transform_EPI_to_T1_ITK = fullfile(PREPROC.preproc_func_dir, 'transform_EPI_to_T1_ITK.txt');
    system(['wb_command' ...
        ' -convert-affine' ...
        ' -from-flirt' ...
        ' ' PREPROC.transform_EPI_to_T1 ...
        ' ' func_ref ...
        ' ' PREPROC.anat_reference_file ...
        ' -to-itk ' PREPROC.transform_EPI_to_T1_ITK]);
    fid = fopen(PREPROC.transform_EPI_to_T1_ITK, 'rt');
    ftext = char(fread(fid)');
    fclose(fid);
    fid = fopen(PREPROC.transform_EPI_to_T1_ITK, 'wt');
    fprintf(fid, strrep(ftext, 'MatrixOffsetTransformBase', 'AffineTransform'));
    fclose(fid);
    PREPROC.transform_T1_to_EPI_ITK = fullfile(PREPROC.preproc_func_dir, 'transform_T1_to_EPI_ITK.txt');
    system(['wb_command' ...
        ' -convert-affine' ...
        ' -from-flirt' ...
        ' ' PREPROC.transform_T1_to_EPI ...
        ' ' PREPROC.anat_reference_file ...
        ' ' func_ref ...
        ' -to-itk ' PREPROC.transform_T1_to_EPI_ITK]);
    fid = fopen(PREPROC.transform_T1_to_EPI_ITK, 'rt');
    ftext = char(fread(fid)');
    fclose(fid);
    fid = fopen(PREPROC.transform_T1_to_EPI_ITK, 'wt');
    fprintf(fid, strrep(ftext, 'MatrixOffsetTransformBase', 'AffineTransform'));
    fclose(fid);
    
end

% Generate coreigstered functional reference image
PREPROC.coregistered_func_reference_file = fullfile(PREPROC.preproc_func_dir, 'coregistered_func_reference.nii');
system(['export FSLOUTPUTTYPE=NIFTI;' ...
    ...
    'flirt' ...
    ' -in ' func_ref ...
    ' -ref ' PREPROC.anat_reference_file ...
    ' -applyxfm -init ' PREPROC.transform_EPI_to_T1 ...
    ' -out ' PREPROC.coregistered_func_reference_file]);
% Extract brain mask of reference image
fprintf('Extracting brain of reference image and saving implicit mask...\n');
PREPROC.coregistered_func_reference_file_masked = fullfile(PREPROC.preproc_func_dir, 'coregistered_func_reference_masked.nii');
PREPROC.coregistered_func_reference_file_binarymask = fullfile(PREPROC.preproc_func_dir, 'coregistered_func_reference_masked_mask.nii');
system(['export FSLOUTPUTTYPE=NIFTI;' ...
    ...
    'bet' ...
    ' ' PREPROC.coregistered_func_reference_file ...
    ' ' PREPROC.coregistered_func_reference_file_masked ...
    ' -f 0.3' ... % ICA-AROMA recommendation
    ' -n' ...
    ' -m' ...
    ' -R']);
% Generate coreigstered anatomical segmentation data
if isfield(PREPROC, 'anat_reference_file_gmseg')
    PREPROC.coregistered_gmseg = fullfile(PREPROC.preproc_anat_dir, 'coregistered_gmseg.nii');
    system(['export FSLOUTPUTTYPE=NIFTI;' ...
    ...
    'flirt' ...
    ' -in ' PREPROC.anat_reference_file_gmseg ...
    ' -ref ' func_ref ...
    ' -applyxfm -init ' PREPROC.transform_T1_to_EPI ...
    ' -interp nearestneighbour' ...
    ' -out ' PREPROC.coregistered_gmseg]);
end
PREPROC.coregistered_wmseg_nuisance_ero = fullfile(PREPROC.preproc_anat_dir, 'coregistered_wmseg_nuisance_ero.nii');
PREPROC.coregistered_csfseg_nuisance_ero = fullfile(PREPROC.preproc_anat_dir, 'coregistered_csfseg_nuisance_ero.nii');
system(['export FSLOUTPUTTYPE=NIFTI;' ...
    ...
    'flirt' ...
    ' -in ' PREPROC.anat_reference_file_wmseg_nuisance_erosion{end} ...
    ' -ref ' func_ref ...
    ' -applyxfm -init ' PREPROC.transform_T1_to_EPI ...
    ' -interp nearestneighbour' ...
    ' -out ' PREPROC.coregistered_wmseg_nuisance_ero]);
system(['export FSLOUTPUTTYPE=NIFTI;' ...
    ...
    'flirt' ...
    ' -in ' PREPROC.anat_reference_file_csfseg_nuisance_erosion{end} ...
    ' -ref ' func_ref ...
    ' -applyxfm -init ' PREPROC.transform_T1_to_EPI ...
    ' -interp nearestneighbour' ...
    ' -out ' PREPROC.coregistered_csfseg_nuisance_ero]);

% Display coregistration result
if do_check
    fprintf('Checking coregistration result...');
    system(['fsleyes -ad ' PREPROC.anat_reference_file ' ' PREPROC.coregistered_func_reference_file ' &']);
end

close all;

PREPROC = save_load_PREPROC(PREPROC.preproc_outputdir, 'save', PREPROC);
fprintf('\n\n\n');

end